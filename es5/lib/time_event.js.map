{"version":3,"sources":["lib/time_event.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;IAEa,gB,WAAA,gB;;;;;;;0BACL,M,EAAQ;AACZ,aAAO,UAAP,CAAkB,qBAAlB,EAAyC,UAAC,MAAD,EAAY;AACnD,eAAO,KAAP,CAAa,aAAb,EAA4B,WAA5B,EAAyC,oBAAzC,E;AACA,eAAO,IAAP,CAAY,kBAAZ,EAAgC,UAAC,MAAD,EAAY;AAC1C,iBAAO,KAAP,CAAa,eAAb;AACA,iBAAO,KAAP,CAAa,eAAb;AACD,SAHD;AAID,OAND;AAOD;;;;;IAGU,e,WAAA,e,GACX,2BAA0C;AAAA,MAA9B,eAA8B,yDAAZ,IAAI,IAAJ,EAAY;AAAA;;;AAExC,OAAK,OAAL,GAAe,KAAf;;AAEA,OAAK,eAAL,GAAuB,eAAvB;AACD,C;;IAGU,mB,WAAA,mB;;;AACX,+BAAY,MAAZ,EAAoB;AAAA;;AAAA,6HACZ,MADY;;AAElB,WAAO,iBAAP,CAAyB,iBAAzB,EAA4C,IAAI,eAAJ,EAA5C;AAFkB;AAGnB;;;;yCAEoB;AACnB,WAAK,MAAL,CAAY,UAAZ,CAAuB,eAAvB,CAAuC,OAAvC,GAAiD,IAAjD;AACD;;;oCAEe;AACd,UAAI,CAAC,KAAK,MAAL,CAAY,UAAZ,CAAuB,eAAvB,CAAuC,OAA5C,EAAqD;AACrD,UAAM,SAAS,KAAK,MAApB;AACA,UAAM,cAAc,OAAO,UAAP,CAAkB,WAAtC;AACA,UAAM,UAAU,OAAO,UAAP,CAAkB,OAAlC;AACA,UAAI,KAAK,QAAL,EAAJ,EAAqB;AACnB,gBAAQ,IAAR,CAAa,gBAAb,EAA+B,KAAK,aAAL,EAA/B,EAAqD,IAArD,CAA0D,KAAK,MAAL,CAAY,mBAAtE;AACD,OAFD,MAEO;AACL,gBAAQ,OAAR,CAAgB,gBAAhB,EAAkC,KAAK,aAAL,EAAlC,E;AACD;AACF;;;oCAEe;AACd,UAAI,CAAC,KAAK,MAAL,CAAY,UAAZ,CAAuB,eAAvB,CAAuC,OAA5C,EAAqD;AACrD,UAAM,SAAS,KAAK,MAApB;AACA,UAAM,cAAc,OAAO,UAAP,CAAkB,WAAtC;AACA,UAAM,UAAU,OAAO,UAAP,CAAkB,OAAlC;AACA,UAAI,KAAK,QAAL,EAAJ,EAAqB;AACnB,gBAAQ,IAAR,CAAa,gBAAb,EAA+B,KAAK,aAAL,EAA/B,EAAqD,IAArD,CAA0D,KAAK,MAAL,CAAY,mBAAtE;AACD,OAFD,MAEO;AACL,gBAAQ,OAAR,CAAgB,gBAAhB,EAAkC,KAAK,aAAL,EAAlC,E;AACD;AACF;;;oCAEe;AACd,UAAM,SAAS,CAAf,C;AACA,UAAM,SAAS,CAAf,C;AACA,UAAM,aAAa,CAAnB,C;AACA,UAAM,UAAU,KAAK,QAAL,EAAhB,C;AACA,UAAM,YAAY,CAAlB,C;AACA,aAAO;AACL,oBAAY,MADP;AAEL,oBAAY,MAFP;AAGL,oBAAY,UAHP;AAIL,oBAAY,OAJP;AAKL,oBAAY;AALP,OAAP;AAOD;;;+BAEU;AACT,UAAM,aAAa,KAAK,MAAL,CAAY,UAAZ,CAAuB,UAA1C;AACA,aAAO,WAAW,YAAX,GAA0B,CAA1B,GAA8B,CAArC;AACD;;;;;AAGH,oCAAuB,mBAAvB,GAA6C,mBAA7C;AACA,iCAAoB,IAApB,CAAyB,gBAAzB","file":"time_event.js","sourcesContent":["import {GhostKernelRoutings, GhostKernelControllers, GhostKernelController} from 'ghost-kernel';\r\n\r\nexport class TimeEventRouting {\r\n  setup(routes) {\r\n    routes.controller('TimeEventController', (routes) => {\r\n      routes.event('GhostKernel', 'boot_done', 'enable_time_events'); // TODO いつが最初なのが正しい?\r\n      routes.from('TimerEventSource', (routes) => {\r\n        routes.event('second_change');\r\n        routes.event('minute_change');\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport class TimerEventState {\r\n  constructor(initializedTime = new Date()) {\r\n    /** * @type {Boolean} */\r\n    this.enabled = false;\r\n    /** * @type {Date} */\r\n    this.initializedTime = initializedTime;\r\n  }\r\n}\r\n\r\nexport class TimeEventController extends GhostKernelController {\r\n  constructor(kernel) {\r\n    super(kernel);\r\n    kernel.registerComponent('TimerEventState', new TimerEventState());\r\n  }\r\n\r\n  enable_time_events() {\r\n    this.kernel.components.TimerEventState.enabled = true;\r\n  }\r\n\r\n  second_change() {\r\n    if (!this.kernel.components.TimerEventState.enabled) return;\r\n    const kernel = this.kernel;\r\n    const Information = kernel.components.Information;\r\n    const shiorif = kernel.components.Shiorif;\r\n    if (this._cantalk()) {\r\n      shiorif.get3('OnSecondChange', this._time_headers()).then(this.kernel.executeSakuraScript);\r\n    } else {\r\n      shiorif.notify3('OnSecondChange', this._time_headers()); // TODO: error handling\r\n    }\r\n  }\r\n\r\n  minute_change() {\r\n    if (!this.kernel.components.TimerEventState.enabled) return;\r\n    const kernel = this.kernel;\r\n    const Information = kernel.components.Information;\r\n    const shiorif = kernel.components.Shiorif;\r\n    if (this._cantalk()) {\r\n      shiorif.get3('OnMinuteChange', this._time_headers()).then(this.kernel.executeSakuraScript);\r\n    } else {\r\n      shiorif.notify3('OnMinuteChange', this._time_headers()); // TODO: error handling\r\n    }\r\n  }\r\n\r\n  _time_headers() {\r\n    const uptime = 0; // TODO: ブラウザでOSのuptimeは取得できない\r\n    const mikire = 0; // TODO: Shell modelを参照する\r\n    const overlapped = 0; // TODO: Shell modelを参照する\r\n    const cantalk = this._cantalk(); // TODO: status modelを参照する\r\n    const left_time = 0; // TODO: SSPでのOSの放置時間の処理方法依存\r\n    return {\r\n      Reference0: uptime,\r\n      Reference1: mikire,\r\n      Reference2: overlapped,\r\n      Reference3: cantalk,\r\n      Reference4: left_time,\r\n    };\r\n  }\r\n\r\n  _cantalk() {\r\n    const shellState = this.kernel.components.ShellState;\r\n    return shellState.timeCritical ? 0 : 1;\r\n  }\r\n}\r\n\r\nGhostKernelControllers.TimeEventController = TimeEventController;\r\nGhostKernelRoutings.push(TimeEventRouting);\r\n"]}